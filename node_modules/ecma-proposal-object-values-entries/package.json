{
  "_args": [
    [
      "ecma-proposal-object-values-entries@github:tc39/proposal-object-values-entries",
      "/home/michal4/Documents/tango/tangojs-panel"
    ]
  ],
  "_from": "tc39/proposal-object-values-entries",
  "_id": "ecma-proposal-object-values-entries@0.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/ecma-proposal-object-values-entries",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/tc39/proposal-object-values-entries/master/package.json",
      "gitUrl": "git://github.com/tc39/proposal-object-values-entries.git",
      "httpsUrl": "git+https://github.com/tc39/proposal-object-values-entries.git",
      "shortcut": "github:tc39/proposal-object-values-entries",
      "ssh": "git@github.com:tc39/proposal-object-values-entries.git",
      "sshUrl": "git+ssh://git@github.com/tc39/proposal-object-values-entries.git",
      "type": "github"
    },
    "name": "ecma-proposal-object-values-entries",
    "raw": "ecma-proposal-object-values-entries@github:tc39/proposal-object-values-entries",
    "rawSpec": "github:tc39/proposal-object-values-entries",
    "scope": null,
    "spec": "github:tc39/proposal-object-values-entries",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/tc39/proposal-object-values-entries.git#025d05e0ec63cf1a9296bd6ae2a51456755ed9b3",
  "_shasum": "a2b9ce386830106fd1c4ac0b789c8fa09828380a",
  "_shrinkwrap": null,
  "_spec": "ecma-proposal-object-values-entries@github:tc39/proposal-object-values-entries",
  "_where": "/home/michal4/Documents/tango/tangojs-panel",
  "author": {
    "email": "ljharb@gmail.com",
    "name": "Jordan Harband"
  },
  "bugs": {
    "url": "https://github.com/ljharb/proposal-object-values-entries/issues"
  },
  "dependencies": {},
  "description": "ES7 spec proposal for Object.{values,entries}",
  "devDependencies": {
    "ecmarkup": "^3.0.1",
    "js-beautify": "^1.6.2",
    "tape": "^4.4.0"
  },
  "gitHead": "025d05e0ec63cf1a9296bd6ae2a51456755ed9b3",
  "homepage": "https://github.com/ljharb/proposal-object-values-entries#readme",
  "keywords": [
    "ES7",
    "Object.entries",
    "Object.keys",
    "Object.values",
    "entries",
    "keys",
    "spec",
    "values"
  ],
  "license": "MIT",
  "name": "ecma-proposal-object-values-entries",
  "optionalDependencies": {},
  "readme": "# [Object.values](https://github.com/es-shims/Object.values) / [Object.entries](https://github.com/es-shims/Object.entries)\nES7 Proposal, specs, and reference implementation for `Object.values`/`Object.entries`\n\nSpec drafted by [@ljharb](https://github.com/ljharb).\n\nThis proposal is currently at [stage 3](https://github.com/tc39/ecma262) of the [process](https://tc39.github.io/process-document/).\n\nDesignated TC39 reviewers: @wycats @littledan @rwaldron\n\nEngine Implementations:\n - [Firefox Nightly](https://bugzilla.mozilla.org/show_bug.cgi?id=1208464) (not yet landed, nightly only)\n - [WebKit Nightly](https://bugs.webkit.org/show_bug.cgi?id=150131) (not yet landed)\n\n## Previous discussions\n - [TC39 meeting notes](https://github.com/rwaldron/tc39-notes/blob/c61f48cea5f2339a1ec65ca89827c8cff170779b/es6/2014-04/apr-9.md#51-objectentries-objectvalues)\n - esdiscuss:\n  - https://esdiscuss.org/topic/object-entries-object-values\n  - https://esdiscuss.org/topic/es6-iteration-over-object-values\n  - https://esdiscuss.org/topic/object-values-and-or-object-foreach -> https://esdiscuss.org/topic/iteration-was-re-object-values-and-or-object-foreach\n  - https://esdiscuss.org/topic/object-entries-in-2015\n  - https://esdiscuss.org/topic/providing-object-iterators-beyond-just-object-keys\n\n## Rationale\nIt is a very common use case to need the own values of an object - for example, when using an object as a hash filter. Many libraries have a “values” function: lodash/underscore, jQuery, Backbone, etc.\n\nIt is also useful to obtain an array of key/value pairs (what the spec calls “entries”) from an object, for the purposes of iteration or serialization. With the advent of the `Map` constructor accepting an iterable of `entries`, and its associated `entries` iterator (`WeakMap` also accepts iterable `entries` in its constructor), it becomes very compelling to want to quickly convert a plain object to a `Map`, via passing an array of `entries` into `new Map`.\n\nWe already have the precedent of `Object.keys` returning an array of own keys, and matched triplets of `keys`/`values`/`entries` iterators on `Map`/`Set`/`Array`. As such, per discussions on es-discuss and in at least one previous TC39 meeting, this proposal seeks to add `Object.values` and `Object.entries` to ECMAScript. Like `Object.keys`, they would return arrays. Their ordering would match `Object.keys` ordering precisely, such that the indices of all three resulting arrays would reflect the same key, value, or entry on the object.\n\n## Spec\nYou can view the spec in [markdown format](spec.md) or rendered as [HTML](http://tc39.github.io/proposal-object-values-entries/).\nNote: there's been a small bit of spec refactoring to ensure that `Object.{keys,values,entries}` share the same key ordering.\n\n## Iterators or Arrays?\nConsistency with `Object.keys` is paramount in this proposal‘s opinion. A follow-on proposal for an iterator, however, could likely be `Reflect.ownValues` and `Reflect.ownEntries`, which would complete the triplet with `Reflect.ownKeys`, providing an array of both string-valued and symbol-valued properties. However, this proposal is focused on `Object.values`/`Object.entries`, and the existence of either the `Object` or `Reflect` forms should not preclude the existence of the other. In addition, the current precedent for returning iterators from `keys`/`values`/`entries` currently only applies to methods on prototypes - and in addition, “`Object` is special” seems to be something many accept. Also, arrays are themselves iterable already.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ljharb/proposal-object-values-entries.git"
  },
  "scripts": {
    "build": "ecmarkup spec.emu --js=spec.js --css=spec.css | js-beautify -f - --type=html -t > index.html",
    "prepublish": "npm run build && echo >&2 'no publishing' && exit 255"
  },
  "version": "0.0.0"
}
